1. Given a random start location, an algorithm for an object in a maze would first check where a wall is and then move depending on the spaces available. To prevent it from backtracking, the algorithm should record the maze as a grid and record the points it has been in, and only go back to those points if there is no other available route. Furthermore, in a situation where it has to backtrack more than two tiles, it should prioritize going to the tile that was occupied earlier, so that it can backtrack greater distances without going back to the path it's turning away from. This would, in theory, allow the algorithm to both find new paths and prevent itself from going to the exact same points within a relatively short amount of time.

2. An algorithm to design a maze would have to make an exit, an entrance, or entrance point, and a path from the entrance to the exit. If an algorithm were to do this, it should design the main path first, ideally with twists and curves, and from this path the algorithm will make paths that ultimately turn into a dead end or loop. This way, these paths are always accessible by the user and don't wall themselves completely off, making useless pockets of empty space.